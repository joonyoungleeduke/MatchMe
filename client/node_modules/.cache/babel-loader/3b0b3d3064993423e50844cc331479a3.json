{"ast":null,"code":"var _jsxFileName = \"/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/Comments.js\";\nimport React from 'react';\nimport { Button, Comment, Form, Header } from 'semantic-ui-react';\n\nconst Comments = props => /*#__PURE__*/React.createElement(Comment.Group, {\n  minimal: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Header, {\n  as: \"h3\",\n  dividing: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }\n}, \"Comments\"), /*#__PURE__*/React.createElement(Comment.Group, {\n  collapsed: props.visible,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }\n}, props.comments.map(comment => /*#__PURE__*/React.createElement(Comment, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(Comment.Avatar, {\n  as: \"a\",\n  src: comment.profile.image,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(Comment.Content, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(Comment.Author, {\n  as: \"a\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 13\n  }\n}, comment.author.first_name + \" \" + comment.author.last_name), /*#__PURE__*/React.createElement(Comment.Text, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 13\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 15\n  }\n}, comment.content)))))), /*#__PURE__*/React.createElement(Form, {\n  reply: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Form.TextArea, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(Button, {\n  content: \"Add Reply\",\n  labelPosition: \"left\",\n  icon: \"edit\",\n  primary: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 7\n  }\n})));\n\nexport default Comments; // class Comment(models.Model):\n//     content = models.TextField(blank=False, default='')\n//     post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')\n//     author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comments')\n//     created = models.DateTimeField(auto_now_add=True)\n//     modified = models.DateTimeField(auto_now=True)\n//     class Meta: \n//         ordering = ['created']\n//     def __str__(self):\n//         return f'Comment {self.content} by {self.author}'\n// async function ParseComments(data) {\n//   for (let idx in data) {\n//       data[idx]['post_id'] = data[idx].post; \n//       data[idx].post = await PostInfo(data[idx].post_id);\n//       data[idx]['user_id'] = data[idx].author;\n//       data[idx]['profile'] = await ProfileInfo(data[idx].user_id);\n//       data[idx].author = await UserInfo(data[idx].user_id);\n//   }\n//   return data; \n// }\n// export default ParseComments;","map":{"version":3,"sources":["/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/Comments.js"],"names":["React","Button","Comment","Form","Header","Comments","props","visible","comments","map","comment","profile","image","author","first_name","last_name","content"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,IAA1B,EAAgCC,MAAhC,QAA8C,mBAA9C;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,iBAEf,oBAAC,OAAD,CAAS,KAAT;AAAe,EAAA,OAAO,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,MAAD;AAAQ,EAAA,EAAE,EAAC,IAAX;AAAgB,EAAA,QAAQ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,oBAAC,OAAD,CAAS,KAAT;AAAe,EAAA,SAAS,EAAEA,KAAK,CAACC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGD,KAAK,CAACE,QAAN,CAAeC,GAAf,CAAmBC,OAAO,iBACzB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,OAAD,CAAS,MAAT;AAAgB,EAAA,EAAE,EAAC,GAAnB;AAAuB,EAAA,GAAG,EAAEA,OAAO,CAACC,OAAR,CAAgBC,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,eAEE,oBAAC,OAAD,CAAS,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,OAAD,CAAS,MAAT;AAAgB,EAAA,EAAE,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAwBF,OAAO,CAACG,MAAR,CAAeC,UAAf,GAA4B,GAA5B,GAAkCJ,OAAO,CAACG,MAAR,CAAeE,SAAzE,CADF,eAKE,oBAAC,OAAD,CAAS,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAIL,OAAO,CAACM,OAAZ,CADF,CALF,CAFF,CADD,CADH,CAJF,eAsDE,oBAAC,IAAD;AAAM,EAAA,KAAK,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,IAAD,CAAM,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,eAEE,oBAAC,MAAD;AAAQ,EAAA,OAAO,EAAC,WAAhB;AAA4B,EAAA,aAAa,EAAC,MAA1C;AAAiD,EAAA,IAAI,EAAC,MAAtD;AAA6D,EAAA,OAAO,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,CAtDF,CAFF;;AAiEA,eAAeX,QAAf,C,CAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["import React from 'react'\nimport { Button, Comment, Form, Header } from 'semantic-ui-react'\n\nconst Comments = (props) => (\n\n  <Comment.Group minimal>\n    <Header as='h3' dividing>\n      Comments\n    </Header>\n    <Comment.Group collapsed={props.visible}>\n      {props.comments.map(comment => (\n        <Comment>\n          <Comment.Avatar as='a' src={comment.profile.image} />\n          <Comment.Content>\n            <Comment.Author as='a'>{comment.author.first_name + \" \" + comment.author.last_name}</Comment.Author>\n            {/* <Comment.Metadata>\n              <span>Yesterday at 12:30AM</span>\n            </Comment.Metadata> */}\n            <Comment.Text>\n              <p>{comment.content}</p>\n            </Comment.Text>\n            {/* <Comment.Actions>\n              <a>Reply</a>\n            </Comment.Actions> */}\n          </Comment.Content>\n        </Comment>\n              ))}\n    </Comment.Group>\n\n    {/* <Comment>\n      <Comment.Avatar as='a' src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\n      <Comment.Content>\n        <Comment.Author as='a'>Elliot Fu</Comment.Author>\n        <Comment.Metadata>\n          <span>Yesterday at 12:30AM</span>\n        </Comment.Metadata>\n        <Comment.Text>\n          <p>This has been very useful for my research. Thanks as well!</p>\n        </Comment.Text>\n        <Comment.Actions>\n          <a>Reply</a>\n        </Comment.Actions>\n      </Comment.Content>\n    </Comment>\n\n    <Comment>\n      <Comment.Avatar as='a' src='https://react.semantic-ui.com/images/avatar/small/joe.jpg' />\n      <Comment.Content>\n        <Comment.Author as='a'>Joe Henderson</Comment.Author>\n        <Comment.Metadata>\n          <span>5 days ago</span>\n        </Comment.Metadata>\n        <Comment.Text>Dude, this is awesome. Thanks so much</Comment.Text>\n        <Comment.Actions>\n          <a>Reply</a>\n        </Comment.Actions>\n      </Comment.Content>\n    </Comment> */}\n\n    <Form reply>\n      <Form.TextArea />\n      <Button content='Add Reply' labelPosition='left' icon='edit' primary />\n    </Form>\n  </Comment.Group>\n\n\n)\n\nexport default Comments\n\n// class Comment(models.Model):\n\n//     content = models.TextField(blank=False, default='')\n    \n//     post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')\n//     author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comments')\n\n//     created = models.DateTimeField(auto_now_add=True)\n//     modified = models.DateTimeField(auto_now=True)\n\n//     class Meta: \n//         ordering = ['created']\n    \n//     def __str__(self):\n//         return f'Comment {self.content} by {self.author}'\n\n// async function ParseComments(data) {\n//   for (let idx in data) {\n//       data[idx]['post_id'] = data[idx].post; \n//       data[idx].post = await PostInfo(data[idx].post_id);\n//       data[idx]['user_id'] = data[idx].author;\n//       data[idx]['profile'] = await ProfileInfo(data[idx].user_id);\n//       data[idx].author = await UserInfo(data[idx].user_id);\n//   }\n\n//   return data; \n// }\n\n// export default ParseComments;\n\n"]},"metadata":{},"sourceType":"module"}