{"ast":null,"code":"var _jsxFileName = \"/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/Comments.js\";\nimport React, { useState } from 'react';\nimport { Comment, Form, Header, Card, Transition, Image, Icon, List } from 'semantic-ui-react';\nimport { Button } from \"@material-ui/core\";\n\nconst Comments = props => {\n  const [comment, setComment] = useState({});\n  const [reply, setReply] = useState({});\n  const [seeReply, setSeeReply] = React.useState(false);\n\n  const handleExpand = () => {\n    setSeeReply(!seeReply);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Group, {\n    minimal: true,\n    style: {\n      display: props.visible ? \"\" : \"none\",\n      width: \"100%\",\n      marginBottom: 30,\n      paddingLeft: 20,\n      paddingRight: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Image, {\n    avatar: true,\n    src: props.img,\n    style: {\n      top: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"90%\",\n      float: \"right\",\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"comment\",\n    type: \"text\",\n    className: \"form-control inputField\",\n    placeHolder: \"Add a comment...\",\n    onChange: () => {\n      setComment();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }))), /*#__PURE__*/React.createElement(Header, {\n    as: \"h3\",\n    dividing: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, \"Comments\"), /*#__PURE__*/React.createElement(Comment.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, props.comments.map(comment => /*#__PURE__*/React.createElement(Comment, {\n    style: {\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Avatar, {\n    as: \"a\",\n    src: comment.profile.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Comment.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Comment.Author, {\n    as: \"a\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 15\n    }\n  }, comment.author.first_name + \" \" + comment.author.last_name), /*#__PURE__*/React.createElement(Comment.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, comment.content), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 20,\n      width: \"100%\",\n      display: seeReply ? \"\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      float: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"reply\",\n    type: \"text\",\n    className: \"form-control inputField\",\n    placeHolder: \"Add a reply...\",\n    onChange: () => {\n      setReply();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 23\n    }\n  })))), /*#__PURE__*/React.createElement(Comment.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(List.Item, {\n    onClick: handleExpand,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, \"Reply\"))))))))));\n};\n\n{\n  /* <Transition visible={props.match_state.showpost} animation='scale' duration={500}> */\n}\nexport default Comments; // class Comment(models.Model):\n//     content = models.TextField(blank=False, default='')\n//     post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')\n//     author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comments')\n//     created = models.DateTimeField(auto_now_add=True)\n//     modified = models.DateTimeField(auto_now=True)\n//     class Meta: \n//         ordering = ['created']\n//     def __str__(self):\n//         return f'Comment {self.content} by {self.author}'\n// async function ParseComments(data) {\n//   for (let idx in data) {\n//       data[idx]['post_id'] = data[idx].post; \n//       data[idx].post = await PostInfo(data[idx].post_id);\n//       data[idx]['user_id'] = data[idx].author;\n//       data[idx]['profile'] = await ProfileInfo(data[idx].user_id);\n//       data[idx].author = await UserInfo(data[idx].user_id);\n//   }\n//   return data; \n// }\n// export default ParseComments;","map":{"version":3,"sources":["/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/Comments.js"],"names":["React","useState","Comment","Form","Header","Card","Transition","Image","Icon","List","Button","Comments","props","comment","setComment","reply","setReply","seeReply","setSeeReply","handleExpand","display","visible","width","marginBottom","paddingLeft","paddingRight","marginTop","img","top","float","comments","map","profile","image","author","first_name","last_name","content"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {Comment, Form, Header,Card, Transition,Image, Icon, List} from 'semantic-ui-react'\nimport {Button } from \"@material-ui/core\"\n\nconst Comments = (props) => {\nconst [comment, setComment] = useState({});\nconst [reply, setReply] = useState({});\nconst [seeReply, setSeeReply] = React.useState(false);\n\nconst handleExpand = () => {\n    setSeeReply(!seeReply);\n};\nreturn(\n  <div>\n    <Comment.Group minimal style={{display: props.visible ? \"\" : \"none\", width: \"100%\", marginBottom: 30, paddingLeft: 20, paddingRight: 20}}>\n    <div style={{marginTop: 0}}>\n      <Image avatar src={props.img} style={{top: 2}}/>\n      <div style={{width: \"90%\", float: \"right\", marginBottom: 10}}>\n      <input name=\"comment\" type=\"text\" className=\"form-control inputField\" placeHolder=\"Add a comment...\" onChange={() => {setComment()}}/>\n      </div>\n      </div>\n      <Header as='h3' dividing>\n        Comments\n      </Header>\n\n      <Comment.Group>\n        {props.comments.map(comment => (\n          <Comment style={{marginBottom: 10}}>\n            <Comment.Avatar as='a' src={comment.profile.image} />\n            <Comment.Content>\n              <Comment.Author as='a'>{comment.author.first_name + \" \" + comment.author.last_name}</Comment.Author>\n              {/* <Comment.Metadata>\n                <span>Yesterday at 12:30AM</span>\n              </Comment.Metadata> */}\n              <Comment.Text>\n                <p>{comment.content}</p>\n                <div className=\"row\" style={{marginTop: 20, width: \"100%\", display: seeReply ? \"\" : \"none\"}} >\n                     {/* <Image avatar src={props.img} size='small'/> */}\n                      <div style={{width: \"100%\", float: \"right\"}}>\n                      <input name=\"reply\" type=\"text\" className=\"form-control inputField\" placeHolder=\"Add a reply...\" onChange={() => {setReply()}}/>\n                      </div>\n                    </div>\n              </Comment.Text>\n              <Comment.Actions>   \n                <List>                        \n                <List.Item onClick={handleExpand}>\n                    <a>Reply</a>\n                </List.Item>\n                </List> \n                \n                \n                {/* () => {showNewComment()} */}\n              </Comment.Actions>\n            </Comment.Content>\n          </Comment>\n                ))}\n      </Comment.Group>\n\n      {/* <Form reply>\n        <Form.TextArea />\n        <Button content='Add Reply' labelPosition='left' icon='edit' primary />\n      </Form> */}\n    </Comment.Group>\n\n  </div>\n  )\n    }\n\n{/* <Transition visible={props.match_state.showpost} animation='scale' duration={500}> */}\n\n\nexport default Comments\n\n// class Comment(models.Model):\n\n//     content = models.TextField(blank=False, default='')\n    \n//     post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')\n//     author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comments')\n\n//     created = models.DateTimeField(auto_now_add=True)\n//     modified = models.DateTimeField(auto_now=True)\n\n//     class Meta: \n//         ordering = ['created']\n    \n//     def __str__(self):\n//         return f'Comment {self.content} by {self.author}'\n\n// async function ParseComments(data) {\n//   for (let idx in data) {\n//       data[idx]['post_id'] = data[idx].post; \n//       data[idx].post = await PostInfo(data[idx].post_id);\n//       data[idx]['user_id'] = data[idx].author;\n//       data[idx]['profile'] = await ProfileInfo(data[idx].user_id);\n//       data[idx].author = await UserInfo(data[idx].user_id);\n//   }\n\n//   return data; \n// }\n\n// export default ParseComments;\n\n"]},"metadata":{},"sourceType":"module"}