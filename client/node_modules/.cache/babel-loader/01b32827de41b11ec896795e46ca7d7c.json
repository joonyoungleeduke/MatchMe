{"ast":null,"code":"var _jsxFileName = \"/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/PostInfScroll.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport axiosInstance from \"../User/axiosApi\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\nfunction PostInfScroll() {\n  const [posts, setPosts] = useState([]);\n  const [matches, setMatches] = useState([]);\n  useEffect(() => {\n    console.log(\"HI\");\n    postFetch({\n      limit: 10\n    });\n  }, []);\n\n  async function postFetch(pagination) {\n    try {\n      var limit = pagination.limit;\n      console.log(limit);\n      var id = localStorage.getItem(\"user_id\");\n      const response = await axiosInstance.get('posts/interests/' + id.toString() + \"/\" + limit.toString() + \"/\");\n      const data = response.data.json();\n      setPosts(data.filter(post => post.isMatch === false));\n      setMatches(data.filter(post => post.isMatch === true));\n      return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: () => postFetch({\n      limit: posts.length + matches.length + 10\n    }),\n    hasMore: true || false,\n    useWindow: false,\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      key: \"loading\",\n      className: \"loader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }\n    }, \"Loading...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, matches.map(match => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, match.content, match.total_hearts, match.author, match.group, match.total_matches, match.goal)), posts.map(post => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, post.content, post.total_hearts, post.author, post.group))));\n}\n\nexport default PostInfScroll;","map":{"version":3,"sources":["/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/PostInfScroll.js"],"names":["React","Component","useState","useEffect","render","axiosInstance","InfiniteScroll","PostInfScroll","posts","setPosts","matches","setMatches","console","log","postFetch","limit","pagination","id","localStorage","getItem","response","get","toString","data","json","filter","post","isMatch","error","length","map","match","content","total_hearts","author","group","total_matches","goal"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;;AAGA,SAASC,aAAT,GAAyB;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAC,IAAAA,SAAS,CAAC;AAAEC,MAAAA,KAAK,EAAC;AAAR,KAAD,CAAT;AACH,GAHQ,EAGN,EAHM,CAAT;;AAKA,iBAAeD,SAAf,CAAyBE,UAAzB,EAAqC;AACjC,QAAI;AACA,UAAID,KAAK,GAAGC,UAAU,CAACD,KAAvB;AAEAH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AAEA,UAAIE,EAAE,GAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAT;AACA,YAAMC,QAAQ,GAAG,MAAMf,aAAa,CAACgB,GAAd,CAAkB,qBAAqBJ,EAAE,CAACK,QAAH,EAArB,GAAqC,GAArC,GAA2CP,KAAK,CAACO,QAAN,EAA3C,GAA8D,GAAhF,CAAvB;AAEA,YAAMC,IAAI,GAAGH,QAAQ,CAACG,IAAT,CAAcC,IAAd,EAAb;AAEAf,MAAAA,QAAQ,CAACc,IAAI,CAACE,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,OAAL,KAAiB,KAArC,CAAD,CAAR;AACAhB,MAAAA,UAAU,CAACY,IAAI,CAACE,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,OAAL,KAAiB,IAArC,CAAD,CAAV;AAEA,aAAOP,QAAQ,CAACG,IAAhB;AACH,KAdD,CAcE,OAAOK,KAAP,EAAc;AACZhB,MAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ;AACH;AACJ;;AAAA;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AACI,IAAA,SAAS,EAAI,CADjB;AAEI,IAAA,QAAQ,EAAI,MAAMd,SAAS,CAAC;AAAEC,MAAAA,KAAK,EAAEP,KAAK,CAACqB,MAAN,GAAenB,OAAO,CAACmB,MAAvB,GAAgC;AAAzC,KAAD,CAF/B;AAGI,IAAA,OAAO,EAAI,QAAQ,KAHvB;AAII,IAAA,SAAS,EAAI,KAJjB;AAKI,IAAA,MAAM,eACF;AAAK,MAAA,GAAG,EAAC,SAAT;AAAmB,MAAA,SAAS,EAAC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWKnB,OAAO,CAACoB,GAAR,CAAYC,KAAK,iBACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KAAK,CAACC,OADX,EAEKD,KAAK,CAACE,YAFX,EAGKF,KAAK,CAACG,MAHX,EAIKH,KAAK,CAACI,KAJX,EAKKJ,KAAK,CAACK,aALX,EAMKL,KAAK,CAACM,IANX,CADH,CAXL,EAuBK7B,KAAK,CAACsB,GAAN,CAAUJ,IAAI,iBACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,IAAI,CAACM,OADV,EAEKN,IAAI,CAACO,YAFV,EAGKP,IAAI,CAACQ,MAHV,EAIKR,IAAI,CAACS,KAJV,CADH,CAvBL,CADJ,CADJ;AAqCH;;AAED,eAAe5B,aAAf","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport axiosInstance from \"../User/axiosApi\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\n\nfunction PostInfScroll() {\n    const [posts, setPosts] = useState([]);\n    const [matches, setMatches] = useState([]); \n\n    useEffect(() => {\n        console.log(\"HI\");\n        postFetch({ limit:10 });\n    }, []);    \n\n    async function postFetch(pagination) {\n        try {\n            var limit = pagination.limit; \n\n            console.log(limit);\n\n            var id = localStorage.getItem(\"user_id\");\n            const response = await axiosInstance.get('posts/interests/' + id.toString() + \"/\" + limit.toString() + \"/\");\n            \n            const data = response.data.json();\n\n            setPosts(data.filter(post => post.isMatch === false));\n            setMatches(data.filter(post => post.isMatch === true));\n\n            return response.data; \n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    return (\n        <div>\n            <InfiniteScroll\n                pageStart = {0}\n                loadMore = {() => postFetch({ limit: posts.length + matches.length + 10 })}\n                hasMore = {true || false}\n                useWindow = {false}\n                loader = {\n                    <div key=\"loading\" className=\"loader\">\n                        Loading...\n                    </div>\n                }\n            > \n                {matches.map(match => (\n                    <div>\n                        {match.content}\n                        {match.total_hearts}\n                        {match.author}\n                        {match.group}\n                        {match.total_matches}\n                        {match.goal}\n                    </div>\n                ))\n\n                }\n                {posts.map(post => (\n                    <div>\n                        {post.content}\n                        {post.total_hearts}\n                        {post.author}\n                        {post.group}\n                    </div>\n                ))}\n            </InfiniteScroll>\n        </div>\n    );\n\n}\n\nexport default PostInfScroll;\n"]},"metadata":{},"sourceType":"module"}