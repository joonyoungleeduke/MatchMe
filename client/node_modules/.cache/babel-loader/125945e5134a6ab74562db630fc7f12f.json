{"ast":null,"code":"var _jsxFileName = \"/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/Comments.js\";\nimport React from 'react';\nimport { Button, Comment, Form, Header, Transition } from 'semantic-ui-react';\n\nconst Comments = props => /*#__PURE__*/React.createElement(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Transition, {\n  visible: props.visible,\n  animation: \"drop\",\n  duration: 500,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Comment.Group, {\n  minimal: true,\n  style: {\n    display: props.visible ? \"\" : \"none\",\n    width: \"100%\"\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Header, {\n  as: \"h3\",\n  dividing: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 7\n  }\n}, \"Comments\"), /*#__PURE__*/React.createElement(Comment.Group, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }\n}, props.comments.map(comment => /*#__PURE__*/React.createElement(Comment, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 11\n  }\n}, /*#__PURE__*/React.createElement(Comment.Avatar, {\n  as: \"a\",\n  src: comment.profile.image,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 13\n  }\n}), /*#__PURE__*/React.createElement(Comment.Content, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 13\n  }\n}, /*#__PURE__*/React.createElement(Comment.Author, {\n  as: \"a\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 15\n  }\n}, comment.author.first_name + \" \" + comment.author.last_name), /*#__PURE__*/React.createElement(Comment.Text, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 15\n  }\n}, /*#__PURE__*/React.createElement(\"p\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 17\n  }\n}, comment.content)))))), /*#__PURE__*/React.createElement(Form, {\n  reply: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(Form.TextArea, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }\n}), /*#__PURE__*/React.createElement(Button, {\n  content: \"Add Reply\",\n  labelPosition: \"left\",\n  icon: \"edit\",\n  primary: true,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }\n})))));\n\n{\n  /* <Transition visible={props.match_state.showpost} animation='scale' duration={500}> */\n}\nexport default Comments; // class Comment(models.Model):\n//     content = models.TextField(blank=False, default='')\n//     post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')\n//     author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comments')\n//     created = models.DateTimeField(auto_now_add=True)\n//     modified = models.DateTimeField(auto_now=True)\n//     class Meta: \n//         ordering = ['created']\n//     def __str__(self):\n//         return f'Comment {self.content} by {self.author}'\n// async function ParseComments(data) {\n//   for (let idx in data) {\n//       data[idx]['post_id'] = data[idx].post; \n//       data[idx].post = await PostInfo(data[idx].post_id);\n//       data[idx]['user_id'] = data[idx].author;\n//       data[idx]['profile'] = await ProfileInfo(data[idx].user_id);\n//       data[idx].author = await UserInfo(data[idx].user_id);\n//   }\n//   return data; \n// }\n// export default ParseComments;","map":{"version":3,"sources":["/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/Comments.js"],"names":["React","Button","Comment","Form","Header","Transition","Comments","props","visible","display","width","comments","map","comment","profile","image","author","first_name","last_name","content"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,IAA1B,EAAgCC,MAAhC,EAAwCC,UAAxC,QAA0D,mBAA1D;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,iBAEf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACA,oBAAC,UAAD;AAAY,EAAA,OAAO,EAAEA,KAAK,CAACC,OAA3B;AAAoC,EAAA,SAAS,EAAC,MAA9C;AAAqD,EAAA,QAAQ,EAAE,GAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,OAAD,CAAS,KAAT;AAAe,EAAA,OAAO,MAAtB;AAAuB,EAAA,KAAK,EAAE;AAACC,IAAAA,OAAO,EAAEF,KAAK,CAACC,OAAN,GAAgB,EAAhB,GAAqB,MAA/B;AAAuCE,IAAAA,KAAK,EAAE;AAA9C,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,MAAD;AAAQ,EAAA,EAAE,EAAC,IAAX;AAAgB,EAAA,QAAQ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,oBAAC,OAAD,CAAS,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGH,KAAK,CAACI,QAAN,CAAeC,GAAf,CAAmBC,OAAO,iBACzB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,OAAD,CAAS,MAAT;AAAgB,EAAA,EAAE,EAAC,GAAnB;AAAuB,EAAA,GAAG,EAAEA,OAAO,CAACC,OAAR,CAAgBC,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,eAEE,oBAAC,OAAD,CAAS,OAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,OAAD,CAAS,MAAT;AAAgB,EAAA,EAAE,EAAC,GAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAwBF,OAAO,CAACG,MAAR,CAAeC,UAAf,GAA4B,GAA5B,GAAkCJ,OAAO,CAACG,MAAR,CAAeE,SAAzE,CADF,eAKE,oBAAC,OAAD,CAAS,IAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAIL,OAAO,CAACM,OAAZ,CADF,CALF,CAFF,CADD,CADH,CAJF,eAwBE,oBAAC,IAAD;AAAM,EAAA,KAAK,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,IAAD,CAAM,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,eAEE,oBAAC,MAAD;AAAQ,EAAA,OAAO,EAAC,WAAhB;AAA4B,EAAA,aAAa,EAAC,MAA1C;AAAiD,EAAA,IAAI,EAAC,MAAtD;AAA6D,EAAA,OAAO,MAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,CAxBF,CADF,CADA,CAFF;;AAwCA;AAAC;AAAyF;AAG1F,eAAeb,QAAf,C,CAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["import React from 'react'\nimport { Button, Comment, Form, Header, Transition } from 'semantic-ui-react'\n\nconst Comments = (props) => (\n\n  <div>\n  <Transition visible={props.visible} animation='drop' duration={500}>\n    <Comment.Group minimal style={{display: props.visible ? \"\" : \"none\", width: \"100%\"}}>\n      <Header as='h3' dividing>\n        Comments\n      </Header>\n      <Comment.Group>\n        {props.comments.map(comment => (\n          <Comment>\n            <Comment.Avatar as='a' src={comment.profile.image} />\n            <Comment.Content>\n              <Comment.Author as='a'>{comment.author.first_name + \" \" + comment.author.last_name}</Comment.Author>\n              {/* <Comment.Metadata>\n                <span>Yesterday at 12:30AM</span>\n              </Comment.Metadata> */}\n              <Comment.Text>\n                <p>{comment.content}</p>\n              </Comment.Text>\n              {/* <Comment.Actions>\n                <a>Reply</a>\n              </Comment.Actions> */}\n            </Comment.Content>\n          </Comment>\n                ))}\n      </Comment.Group>\n\n      <Form reply>\n        <Form.TextArea />\n        <Button content='Add Reply' labelPosition='left' icon='edit' primary />\n      </Form>\n    </Comment.Group>\n\n  </Transition>\n\n\n  </div>\n)\n\n{/* <Transition visible={props.match_state.showpost} animation='scale' duration={500}> */}\n\n\nexport default Comments\n\n// class Comment(models.Model):\n\n//     content = models.TextField(blank=False, default='')\n    \n//     post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')\n//     author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comments')\n\n//     created = models.DateTimeField(auto_now_add=True)\n//     modified = models.DateTimeField(auto_now=True)\n\n//     class Meta: \n//         ordering = ['created']\n    \n//     def __str__(self):\n//         return f'Comment {self.content} by {self.author}'\n\n// async function ParseComments(data) {\n//   for (let idx in data) {\n//       data[idx]['post_id'] = data[idx].post; \n//       data[idx].post = await PostInfo(data[idx].post_id);\n//       data[idx]['user_id'] = data[idx].author;\n//       data[idx]['profile'] = await ProfileInfo(data[idx].user_id);\n//       data[idx].author = await UserInfo(data[idx].user_id);\n//   }\n\n//   return data; \n// }\n\n// export default ParseComments;\n\n"]},"metadata":{},"sourceType":"module"}