{"ast":null,"code":"var _jsxFileName = \"/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/NewPost.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport axiosInstance from \"../User/axiosApi\";\nimport { Form, Button } from 'semantic-ui-react';\n\nfunction NewPost() {\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    parseOptions();\n  }, []);\n\n  async function parseOptions() {\n    var groups = await groupsFetch();\n    var options_arr = new Array();\n\n    for (let idx in groups) {\n      // this code makes no sense! :) but it works...\n      // console.log(group);\n      options_arr.push({\n        text: groups[idx].name,\n        value: groups[idx].id\n      });\n    }\n\n    setOptions(options_arr);\n  }\n\n  ;\n\n  async function groupsFetch() {\n    try {\n      var id = localStorage.getItem(\"user_id\");\n      const response = await axiosInstance.get('api/groups/user/' + id.toString() + \"/\");\n      console.log(response.data);\n      return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    widths: \"equal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Select, {\n    fluid: true,\n    label: \"Group\",\n    options: options,\n    placeholder: \"Group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.TextArea, {\n    label: \"Content\",\n    placeholder: \"What's on your mind?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, \"Submit\"));\n}\n\nexport default NewPost; // content = models.TextField(blank=False, default='')\n// hearts = models.ManyToManyField(User, blank=True, through=UserHeart, related_name='heart_user')\n// author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='post')\n// group = models.ForeignKey(ActionGroup, on_delete=models.CASCADE, related_name='post')\n// created = models.DateTimeField(auto_now_add=True)\n// modified = models.DateTimeField(auto_now=True)\n// isMatch = models.BooleanField(blank=False, default=False)\n// matches = models.ManyToManyField(User, blank=True, through=UserMatch, related_name='match_user')\n// goal = models.IntegerField(\n//     default=10,\n//     validators=[\n//         MinValueValidator(10),\n//         MaxValueValidator(100000),\n//     ],\n// )\n// def __str__(self):\n//     return f'Post by {self.author} with {self.hearts} hearts'\n// class Meta: \n//     ordering = ['-created']","map":{"version":3,"sources":["/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/NewPost.js"],"names":["React","Component","useState","useEffect","axiosInstance","Form","Button","NewPost","options","setOptions","parseOptions","groups","groupsFetch","options_arr","Array","idx","push","text","name","value","id","localStorage","getItem","response","get","toString","console","log","data","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,mBAA7B;;AAEA,SAASC,OAAT,GAAmB;AAEf,QAAK,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAArC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,YAAY;AACf,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeA,YAAf,GAA8B;AAE1B,QAAIC,MAAM,GAAG,MAAMC,WAAW,EAA9B;AAEA,QAAIC,WAAW,GAAG,IAAIC,KAAJ,EAAlB;;AAEA,SAAK,IAAIC,GAAT,IAAgBJ,MAAhB,EAAwB;AAAE;AACtB;AACAE,MAAAA,WAAW,CAACG,IAAZ,CAAiB;AACbC,QAAAA,IAAI,EAAEN,MAAM,CAACI,GAAD,CAAN,CAAYG,IADL;AAEbC,QAAAA,KAAK,EAAER,MAAM,CAACI,GAAD,CAAN,CAAYK;AAFN,OAAjB;AAIH;;AAEDX,IAAAA,UAAU,CAACI,WAAD,CAAV;AACH;;AAAA;;AAED,iBAAeD,WAAf,GAA6B;AACzB,QAAI;AACA,UAAIQ,EAAE,GAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAT;AACA,YAAMC,QAAQ,GAAG,MAAMnB,aAAa,CAACoB,GAAd,CAAkB,qBAAqBJ,EAAE,CAACK,QAAH,EAArB,GAAqC,GAAvD,CAAvB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAQ,CAACK,IAArB;AAEA,aAAOL,QAAQ,CAACK,IAAhB;AAEH,KARD,CAQE,OAAOC,KAAP,EAAc;AACZH,MAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH;AACJ;;AAAA;AAED,sBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,MAAM,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,CAAM,MAAN;AACI,IAAA,KAAK,MADT;AAEI,IAAA,KAAK,EAAC,OAFV;AAGI,IAAA,OAAO,EAAErB,OAHb;AAII,IAAA,WAAW,EAAC,OAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eASI,oBAAC,IAAD,CAAM,QAAN;AAAe,IAAA,KAAK,EAAC,SAArB;AAA+B,IAAA,WAAW,EAAC,sBAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,eAUI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,CADJ;AAcH;;AAED,eAAeD,OAAf,C,CAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport axiosInstance from \"../User/axiosApi\";\nimport { Form, Button } from 'semantic-ui-react';\n\nfunction NewPost() {\n\n    const[options, setOptions] = useState([]);\n\n    useEffect(() => {\n        parseOptions()\n    }, []);   \n\n    async function parseOptions() {\n\n        var groups = await groupsFetch();\n\n        var options_arr = new Array();  \n\n        for (let idx in groups) { // this code makes no sense! :) but it works...\n            // console.log(group);\n            options_arr.push({\n                text: groups[idx].name, \n                value: groups[idx].id,\n            });\n        }\n\n        setOptions(options_arr);\n    };\n\n    async function groupsFetch() {\n        try {\n            var id = localStorage.getItem(\"user_id\");\n            const response = await axiosInstance.get('api/groups/user/' + id.toString() + \"/\");\n\n            console.log(response.data)\n\n            return response.data;\n\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    return(\n        <Form>\n            <Form.Group widths='equal'>\n                <Form.Select\n                    fluid \n                    label='Group'\n                    options={options}\n                    placeholder='Group'\n                />\n            </Form.Group>\n            <Form.TextArea label=\"Content\" placeholder=\"What's on your mind?\" />\n            <Form.Button>Submit</Form.Button>\n        </Form>\n    );\n}\n\nexport default NewPost;\n\n// content = models.TextField(blank=False, default='')\n\n// hearts = models.ManyToManyField(User, blank=True, through=UserHeart, related_name='heart_user')\n\n// author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='post')\n// group = models.ForeignKey(ActionGroup, on_delete=models.CASCADE, related_name='post')\n// created = models.DateTimeField(auto_now_add=True)\n// modified = models.DateTimeField(auto_now=True)\n\n// isMatch = models.BooleanField(blank=False, default=False)\n// matches = models.ManyToManyField(User, blank=True, through=UserMatch, related_name='match_user')\n// goal = models.IntegerField(\n//     default=10,\n//     validators=[\n//         MinValueValidator(10),\n//         MaxValueValidator(100000),\n//     ],\n// )\n\n// def __str__(self):\n//     return f'Post by {self.author} with {self.hearts} hearts'\n\n// class Meta: \n//     ordering = ['-created']"]},"metadata":{},"sourceType":"module"}