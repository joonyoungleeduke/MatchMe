{"ast":null,"code":"var _jsxFileName = \"/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/DropDown.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Dropdown, Input } from 'semantic-ui-react';\nconst tagOptions = [{\n  key: 'Important',\n  text: 'Important',\n  value: 'Important',\n  label: {\n    color: 'red',\n    empty: true,\n    circular: true\n  } // image: { avatar: true, src: '/images/avatar/small/jenny.jpg' },\n\n}, {\n  key: 'Announcement',\n  text: 'Announcement',\n  value: 'Announcement',\n  label: {\n    color: 'blue',\n    empty: true,\n    circular: true\n  }\n}, {\n  key: 'Cannot Fix',\n  text: 'Cannot Fix',\n  value: 'Cannot Fix',\n  label: {\n    color: 'black',\n    empty: true,\n    circular: true\n  }\n}];\n\nconst DropDown = props => {\n  const groups = props.groups;\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    setterOptions();\n  }, {});\n\n  async function parseOptions() {\n    let arr = Array();\n\n    for (let idx in groups) {\n      arr.push({\n        key: groups[idx].name,\n        text: groups[idx].name,\n        value: groups[idx].name,\n        image: {\n          avatar: true,\n          src: groups[idx].image\n        }\n      });\n    }\n\n    return arr;\n  }\n\n  async function setterOptions() {\n    let arr = await parseOptions();\n    setOptions(arr);\n  }\n\n  return /*#__PURE__*/React.createElement(Dropdown, {\n    text: \"Groups\",\n    selection: true,\n    search: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown.Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    scrolling: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, options.map(option => /*#__PURE__*/React.createElement(Dropdown.Item, Object.assign({\n    key: option.value\n  }, option, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default DropDown;","map":{"version":3,"sources":["/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/DropDown.js"],"names":["React","useEffect","useState","Dropdown","Input","tagOptions","key","text","value","label","color","empty","circular","DropDown","props","groups","options","setOptions","setterOptions","parseOptions","arr","Array","idx","push","name","image","avatar","src","map","option"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Dropdown, Input } from 'semantic-ui-react'\n\n\nconst tagOptions = [\n    {\n      key: 'Important',\n      text: 'Important',\n      value: 'Important',\n      label: { color: 'red', empty: true, circular: true },\n      // image: { avatar: true, src: '/images/avatar/small/jenny.jpg' },\n    },\n    {\n      key: 'Announcement',\n      text: 'Announcement',\n      value: 'Announcement',\n      label: { color: 'blue', empty: true, circular: true },\n    },\n    {\n      key: 'Cannot Fix',\n      text: 'Cannot Fix',\n      value: 'Cannot Fix',\n      label: { color: 'black', empty: true, circular: true },\n    },\n];\n\nconst DropDown = (props) => {\n\n    const groups = props.groups;\n\n    const [options, setOptions] = useState([]);\n\n    useEffect(() => {\n      setterOptions(); \n  }, {});\n\n    async function parseOptions() {\n      let arr = Array();\n      for (let idx in groups) {\n        arr.push({\n          key: groups[idx].name,\n          text: groups[idx].name,\n          value: groups[idx].name,\n          image: {avatar:true, src: groups[idx].image},\n        })\n      }\n      return arr; \n    }\n\n    async function setterOptions() {\n      let arr = await parseOptions();\n      setOptions(arr);\n    }\n\n    return (\n        <Dropdown\n        text='Groups'\n        selection\n        search\n      >\n        <Dropdown.Menu>\n          <Dropdown.Divider />\n          {/* <Dropdown.Header icon='tags' content='Tag Label' /> */}\n          <Dropdown.Menu scrolling>\n                {/* {props.groups}  */}\n            {options.map((option) => (\n              <Dropdown.Item key={option.value} {...option} />\n            ))}\n          </Dropdown.Menu>\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n}\n    \n\nexport default DropDown;"]},"metadata":{},"sourceType":"module"}