{"ast":null,"code":"var _jsxFileName = \"/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/PostInfScroll.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport axiosInstance from \"../User/axiosApi\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\nfunction PostInfScroll() {\n  const [posts, setPosts] = useState([]);\n  const [matches, setMatches] = useState([]);\n  useEffect(() => {\n    postFetch({\n      limit: 10\n    });\n  }, []);\n\n  async function postFetch(pagination) {\n    try {\n      var limit = pagination.limit;\n      var id = localStorage.getItem(\"user_id\");\n      const response = await axiosInstance.get('api/posts/interests/' + id.toString() + \"/\" + limit.toString() + \"/\");\n      const data = response.data;\n      setPosts(data.filter(post => post.isMatch === false));\n      setMatches(data.filter(post => post.isMatch === true));\n      return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, matches.map(match => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }\n  }, \"MATCH POST\"), match.content, match.total_hearts, match.author, match.group, match.total_matches, match.goal)), posts.map(post => /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, \"REGULAR POST\"), post.content, post.total_hearts, post.author, post.group)));\n}\n\nexport default PostInfScroll;","map":{"version":3,"sources":["/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/PostInfScroll.js"],"names":["React","Component","useState","useEffect","render","axiosInstance","InfiniteScroll","PostInfScroll","posts","setPosts","matches","setMatches","postFetch","limit","pagination","id","localStorage","getItem","response","get","toString","data","filter","post","isMatch","error","console","log","map","match","content","total_hearts","author","group","total_matches","goal"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;;AAGA,SAASC,aAAT,GAAyB;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,SAAS,CAAC;AAAEC,MAAAA,KAAK,EAAC;AAAR,KAAD,CAAT;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeD,SAAf,CAAyBE,UAAzB,EAAqC;AACjC,QAAI;AACA,UAAID,KAAK,GAAGC,UAAU,CAACD,KAAvB;AACA,UAAIE,EAAE,GAAGC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAT;AACA,YAAMC,QAAQ,GAAG,MAAMb,aAAa,CAACc,GAAd,CAAkB,yBAAyBJ,EAAE,CAACK,QAAH,EAAzB,GAAyC,GAAzC,GAA+CP,KAAK,CAACO,QAAN,EAA/C,GAAkE,GAApF,CAAvB;AAEA,YAAMC,IAAI,GAAGH,QAAQ,CAACG,IAAtB;AAEAZ,MAAAA,QAAQ,CAACY,IAAI,CAACC,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,OAAL,KAAiB,KAArC,CAAD,CAAR;AACAb,MAAAA,UAAU,CAACU,IAAI,CAACC,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,OAAL,KAAiB,IAArC,CAAD,CAAV;AAEA,aAAON,QAAQ,CAACG,IAAhB;AACH,KAXD,CAWE,OAAOI,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ;;AAAA;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYSf,OAAO,CAACkB,GAAR,CAAYC,KAAK,iBACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEKA,KAAK,CAACC,OAFX,EAGKD,KAAK,CAACE,YAHX,EAIKF,KAAK,CAACG,MAJX,EAKKH,KAAK,CAACI,KALX,EAMKJ,KAAK,CAACK,aANX,EAOKL,KAAK,CAACM,IAPX,CADH,CAZT,EAyBS3B,KAAK,CAACoB,GAAN,CAAUL,IAAI,iBACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEKA,IAAI,CAACO,OAFV,EAGKP,IAAI,CAACQ,YAHV,EAIKR,IAAI,CAACS,MAJV,EAKKT,IAAI,CAACU,KALV,CADH,CAzBT,CADJ;AAuCH;;AAED,eAAe1B,aAAf","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport axiosInstance from \"../User/axiosApi\";\nimport InfiniteScroll from 'react-infinite-scroller';\n\n\nfunction PostInfScroll() {\n    const [posts, setPosts] = useState([]);\n    const [matches, setMatches] = useState([]); \n\n    useEffect(() => {\n        postFetch({ limit:10 });\n    }, []);    \n\n    async function postFetch(pagination) {\n        try {\n            var limit = pagination.limit; \n            var id = localStorage.getItem(\"user_id\");\n            const response = await axiosInstance.get('api/posts/interests/' + id.toString() + \"/\" + limit.toString() + \"/\");\n            \n            const data = response.data;\n\n            setPosts(data.filter(post => post.isMatch === false));\n            setMatches(data.filter(post => post.isMatch === true));\n\n            return response.data; \n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    return (\n        <div>\n            {/* <InfiniteScroll\n                pageStart = {0}\n                loadMore = {() => postFetch({ limit: posts.length + matches.length + 10 })}\n                hasMore = {true || false}\n                useWindow = {false}\n                loader = {\n                    <div key=\"loading\" className=\"loader\">\n                        Loading...\n                    </div>\n                }\n            >  */}\n                {matches.map(match => (\n                    <div>\n                        <h1>MATCH POST</h1>\n                        {match.content}\n                        {match.total_hearts}\n                        {match.author}\n                        {match.group}\n                        {match.total_matches}\n                        {match.goal}\n                    </div>\n                ))\n\n                }\n                {posts.map(post => (\n                    <div>\n                        <h1>REGULAR POST</h1>\n                        {post.content}\n                        {post.total_hearts}\n                        {post.author}\n                        {post.group}\n                    </div>\n                ))}\n            {/* </InfiniteScroll> */}\n        </div>\n    );\n\n}\n\nexport default PostInfScroll;\n"]},"metadata":{},"sourceType":"module"}