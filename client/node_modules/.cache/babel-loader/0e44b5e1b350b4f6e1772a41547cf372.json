{"ast":null,"code":"var _jsxFileName = \"/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/NewPost.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport axiosInstance from \"../User/axiosApi\";\nimport { Form, Button } from 'semantic-ui-react';\n\nfunction NewPost() {\n  const [options, setOptions] = useState([]);\n  const [form, setForm] = useState({\n    group: null,\n    content: \"\"\n  });\n  useEffect(() => {\n    parseOptions();\n  }, []);\n\n  async function parseOptions() {\n    var groups = await groupsFetch();\n    var options_arr = new Array();\n\n    for (let idx in groups) {\n      // this code makes no sense! :) but it works...\n      // console.log(group);\n      options_arr.push({\n        text: groups[idx].name,\n        value: groups[idx].id\n      });\n    }\n\n    console.log(options_arr);\n    setOptions(options_arr);\n  }\n\n  ;\n\n  async function groupsFetch() {\n    try {\n      var id = localStorage.getItem(\"user_id\");\n      const response = await axiosInstance.get('api/groups/user/' + id.toString() + \"/\");\n      return response.data;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  ;\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    try {\n      console.log(form);\n      console.log(form.group);\n      const response = await axiosInstance.post('api/posts/create/', {\n        group: form.group,\n        content: form.content\n      });\n\n      if (response.status === 200) {// should redirect to somewhere \n      }\n\n      console.log(response);\n      return response;\n    } catch (error) {\n      console.log(error.stack);\n    }\n  }\n\n  ;\n\n  function handleChange(event) {\n    setForm(...form, {\n      [event.target.name]: event.target.value\n    });\n  }\n\n  const handleSelectChange = (e, {\n    value\n  }) => setForm({\n    [e.target.name]: value\n  });\n\n  return /*#__PURE__*/React.createElement(Form, {\n    onSubmit: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    widths: \"equal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Select, {\n    fluid: true,\n    label: \"Group\",\n    name: \"group\",\n    options: options,\n    placeholder: \"Group\" // value = {form.group}\n    ,\n    onChange: handleSelectChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Form.TextArea, {\n    name: \"content\",\n    label: \"Content\",\n    placeholder: \"What's on your mind?\",\n    onChange: e => handleChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Form.Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Submit\"));\n}\n\nexport default NewPost; // content = models.TextField(blank=False, default='')\n// hearts = models.ManyToManyField(User, blank=True, through=UserHeart, related_name='heart_user')\n// author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='post')\n// group = models.ForeignKey(ActionGroup, on_delete=models.CASCADE, related_name='post')\n// created = models.DateTimeField(auto_now_add=True)\n// modified = models.DateTimeField(auto_now=True)\n// isMatch = models.BooleanField(blank=False, default=False)\n// matches = models.ManyToManyField(User, blank=True, through=UserMatch, related_name='match_user')\n// goal = models.IntegerField(\n//     default=10,\n//     validators=[\n//         MinValueValidator(10),\n//         MaxValueValidator(100000),\n//     ],\n// )\n// def __str__(self):\n//     return f'Post by {self.author} with {self.hearts} hearts'\n// class Meta: \n//     ordering = ['-created']\n// return (\n//     <div class=\"container justify-content-center align-items-center\">\n//         <div class=\"row justify-content-center\">\n//             <div class=\"col-md-6\" style={styles.register_form}>\n//                 <h3>Register</h3>\n//                 <form onSubmit={this.handleSubmit}>\n//                     <div class=\"form-group\">\n//                         <input type=\"username\" className=\"form-control\" placeholder=\"Username\" onChange={this.handleChange} value={this.state.username}/>\n//                     </div>\n//                     <div class=\"form-group\">\n//                         <input type=\"password\" className=\"form-control\" placeholder=\"First Name\" onChange={this.handleChange} value={this.state.first_name}/>\n//                     </div>\n//                     <div class=\"form-group\">\n//                         <input type=\"password\" className=\"form-control\" placeholder=\"Last Name\" onChange={this.handleChange} value={this.state.last_name}/>\n//                     </div>\n//                     <div class=\"form-group\">\n//                         <input type=\"password\" className=\"form-control\" placeholder=\"Email\" onChange={this.handleChange} value={this.state.email}/>\n//                     </div>\n//                     <div class=\"form-group\">\n//                         <input type=\"password\" className=\"form-control\" placeholder=\"Password\" onChange={this.handleChange} value={this.state.password}/>\n//                     </div>\n//                     <button type=\"submit\" value=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\n//                     <p className=\"forgot-password text-right\">\n//                         Already registered? <a href=\"/login\">Sign in</a>\n//                     </p>\n//                 </form>\n//             </div>\n//         </div>\n//     </div>    \n// )","map":{"version":3,"sources":["/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/NewPost.js"],"names":["React","Component","useState","useEffect","axiosInstance","Form","Button","NewPost","options","setOptions","form","setForm","group","content","parseOptions","groups","groupsFetch","options_arr","Array","idx","push","text","name","value","id","console","log","localStorage","getItem","response","get","toString","data","error","handleSubmit","event","preventDefault","post","status","stack","handleChange","target","handleSelectChange","e"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport axiosInstance from \"../User/axiosApi\";\nimport { Form, Button } from 'semantic-ui-react';\n\nfunction NewPost() {\n\n    const[options, setOptions] = useState([]);\n    const[form, setForm] = useState({\n        group: null,\n        content: \"\",\n    });\n\n    useEffect(() => {\n        parseOptions()\n    }, []);   \n\n    async function parseOptions() {\n\n        var groups = await groupsFetch();\n\n        var options_arr = new Array();  \n\n        for (let idx in groups) { // this code makes no sense! :) but it works...\n            // console.log(group);\n            options_arr.push({\n                text: groups[idx].name, \n                value: groups[idx].id,\n            });\n        }\n\n        console.log(options_arr);\n\n        setOptions(options_arr);\n    };\n\n    async function groupsFetch() {\n        try {\n            var id = localStorage.getItem(\"user_id\");\n            const response = await axiosInstance.get('api/groups/user/' + id.toString() + \"/\");\n\n            return response.data;\n\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n        try {\n            console.log(form);\n            console.log(form.group);\n\n            const response = await axiosInstance.post('api/posts/create/', {\n                group: form.group,\n                content: form.content,\n            });\n            if (response.status === 200) {\n                // should redirect to somewhere \n            }\n\n            console.log(response);\n\n            return response;\n        } catch (error) {\n            console.log(error.stack);\n        }\n    };\n\n    function handleChange(event) {\n        setForm(...form, {[event.target.name]: event.target.value});\n    }\n\n    const handleSelectChange = (e, { value }) => setForm({[e.target.name]: value});\n\n    return(\n        <Form onSubmit={(e) => handleSubmit(e)}>\n            <Form.Group widths='equal'>\n                <Form.Select\n                    fluid \n                    label='Group'\n                    name='group'\n                    options={options}\n                    placeholder='Group'\n                    // value = {form.group}\n                    onChange = {handleSelectChange}\n                />\n            </Form.Group>\n            <Form.TextArea name='content' label=\"Content\" placeholder=\"What's on your mind?\" onChange = {(e) => handleChange(e)}/>\n            <Form.Button>Submit</Form.Button>\n        </Form>\n    );\n}\n\nexport default NewPost;\n\n// content = models.TextField(blank=False, default='')\n\n// hearts = models.ManyToManyField(User, blank=True, through=UserHeart, related_name='heart_user')\n\n// author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='post')\n// group = models.ForeignKey(ActionGroup, on_delete=models.CASCADE, related_name='post')\n// created = models.DateTimeField(auto_now_add=True)\n// modified = models.DateTimeField(auto_now=True)\n\n// isMatch = models.BooleanField(blank=False, default=False)\n// matches = models.ManyToManyField(User, blank=True, through=UserMatch, related_name='match_user')\n// goal = models.IntegerField(\n//     default=10,\n//     validators=[\n//         MinValueValidator(10),\n//         MaxValueValidator(100000),\n//     ],\n// )\n\n// def __str__(self):\n//     return f'Post by {self.author} with {self.hearts} hearts'\n\n// class Meta: \n//     ordering = ['-created']\n\n// return (\n//     <div class=\"container justify-content-center align-items-center\">\n//         <div class=\"row justify-content-center\">\n//             <div class=\"col-md-6\" style={styles.register_form}>\n//                 <h3>Register</h3>\n//                 <form onSubmit={this.handleSubmit}>\n//                     <div class=\"form-group\">\n//                         <input type=\"username\" className=\"form-control\" placeholder=\"Username\" onChange={this.handleChange} value={this.state.username}/>\n//                     </div>\n//                     <div class=\"form-group\">\n//                         <input type=\"password\" className=\"form-control\" placeholder=\"First Name\" onChange={this.handleChange} value={this.state.first_name}/>\n//                     </div>\n//                     <div class=\"form-group\">\n//                         <input type=\"password\" className=\"form-control\" placeholder=\"Last Name\" onChange={this.handleChange} value={this.state.last_name}/>\n//                     </div>\n//                     <div class=\"form-group\">\n//                         <input type=\"password\" className=\"form-control\" placeholder=\"Email\" onChange={this.handleChange} value={this.state.email}/>\n//                     </div>\n//                     <div class=\"form-group\">\n//                         <input type=\"password\" className=\"form-control\" placeholder=\"Password\" onChange={this.handleChange} value={this.state.password}/>\n//                     </div>\n//                     <button type=\"submit\" value=\"submit\" className=\"btn btn-primary btn-block\">Sign Up</button>\n//                     <p className=\"forgot-password text-right\">\n//                         Already registered? <a href=\"/login\">Sign in</a>\n//                     </p>\n//                 </form>\n//             </div>\n//         </div>\n//     </div>    \n// )"]},"metadata":{},"sourceType":"module"}