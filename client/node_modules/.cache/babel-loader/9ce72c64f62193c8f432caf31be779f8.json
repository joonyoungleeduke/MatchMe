{"ast":null,"code":"var _jsxFileName = \"/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/DropDown.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Dropdown, Input } from 'semantic-ui-react';\n\nconst DropDown = props => {\n  const [groups, setGroups] = useState(props.groups);\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    setterOptions();\n  }, {});\n\n  async function parseOptions() {\n    let arr = Array();\n\n    for (let idx in groups) {\n      console.log('IDX');\n      console.log(idx);\n      arr.push({\n        key: groups[idx].name,\n        text: groups[idx].name,\n        value: groups[idx].name,\n        image: {\n          avatar: true,\n          src: groups[idx].image\n        }\n      });\n    }\n\n    return arr;\n  }\n\n  async function setterOptions() {\n    let arr = await parseOptions();\n    setOptions(arr);\n  }\n\n  return /*#__PURE__*/React.createElement(Dropdown, {\n    text: \"Groups\",\n    selection: true,\n    search: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown.Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    scrolling: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, console.log(options), options.map(option => /*#__PURE__*/React.createElement(Dropdown.Item, Object.assign({\n    key: option.value\n  }, option, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }))))));\n};\n\nexport default DropDown;","map":{"version":3,"sources":["/Users/joonyounglee/MITHACK/MITHack2020/client/src/Components/DropDown.js"],"names":["React","useEffect","useState","Dropdown","Input","DropDown","props","groups","setGroups","options","setOptions","setterOptions","parseOptions","arr","Array","idx","console","log","push","key","name","text","value","image","avatar","src","map","option"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,mBAAhC;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAExB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAACI,KAAK,CAACC,MAAP,CAApC;AAEA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,aAAa;AAChB,GAFU,EAER,EAFQ,CAAT;;AAIA,iBAAeC,YAAf,GAA8B;AAC5B,QAAIC,GAAG,GAAGC,KAAK,EAAf;;AACA,SAAK,IAAIC,GAAT,IAAgBR,MAAhB,EAAwB;AACtBS,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAF,MAAAA,GAAG,CAACK,IAAJ,CAAS;AACPC,QAAAA,GAAG,EAAEZ,MAAM,CAACQ,GAAD,CAAN,CAAYK,IADV;AAEPC,QAAAA,IAAI,EAAEd,MAAM,CAACQ,GAAD,CAAN,CAAYK,IAFX;AAGPE,QAAAA,KAAK,EAAEf,MAAM,CAACQ,GAAD,CAAN,CAAYK,IAHZ;AAIPG,QAAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAC,IAAR;AAAcC,UAAAA,GAAG,EAAElB,MAAM,CAACQ,GAAD,CAAN,CAAYQ;AAA/B;AAJA,OAAT;AAMD;;AACD,WAAOV,GAAP;AACD;;AAED,iBAAeF,aAAf,GAA+B;AAC7B,QAAIE,GAAG,GAAG,MAAMD,YAAY,EAA5B;AACAF,IAAAA,UAAU,CAACG,GAAD,CAAV;AACD;;AAED,sBACI,oBAAC,QAAD;AACA,IAAA,IAAI,EAAC,QADL;AAEA,IAAA,SAAS,MAFT;AAGA,IAAA,MAAM,MAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKA,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD,CAAU,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAGE,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,SAAS,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKG,OAAO,CAACC,GAAR,CAAYR,OAAZ,CAFL,EAGGA,OAAO,CAACiB,GAAR,CAAaC,MAAD,iBACX,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,GAAG,EAAEA,MAAM,CAACL;AAA3B,KAAsCK,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CAHH,CAHF,CALA,CADJ;AAmBH,CAjDD;;AAoDA,eAAetB,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Dropdown, Input } from 'semantic-ui-react'\n\nconst DropDown = (props) => {\n\n    const [groups, setGroups] = useState(props.groups);\n\n    const [options, setOptions] = useState([]);\n\n    useEffect(() => {\n      setterOptions(); \n  }, {});\n\n    async function parseOptions() {\n      let arr = Array();\n      for (let idx in groups) {\n        console.log('IDX')\n        console.log(idx);\n        arr.push({\n          key: groups[idx].name,\n          text: groups[idx].name,\n          value: groups[idx].name,\n          image: {avatar:true, src: groups[idx].image},\n        })\n      }\n      return arr; \n    }\n\n    async function setterOptions() {\n      let arr = await parseOptions();\n      setOptions(arr);\n    }\n\n    return (\n        <Dropdown\n        text='Groups'\n        selection\n        search\n      >\n        <Dropdown.Menu>\n          <Dropdown.Divider />\n          {/* <Dropdown.Header icon='tags' content='Tag Label' /> */}\n          <Dropdown.Menu scrolling>\n                {/* {props.groups}  */}\n              {console.log(options)}\n            {options.map((option) => (\n              <Dropdown.Item key={option.value} {...option} />\n            ))}\n          </Dropdown.Menu>\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n}\n    \n\nexport default DropDown;"]},"metadata":{},"sourceType":"module"}