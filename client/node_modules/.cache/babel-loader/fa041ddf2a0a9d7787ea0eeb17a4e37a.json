{"ast":null,"code":"import axios from 'axios';\nconst baseURL = 'http://localhost:8000/';\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    'Authorization': localStorage.getItem('access_token') ? \"JWT \" + localStorage.getItem('access_token') : null,\n    'Content-Type': 'application/json',\n    'accept': 'application/json'\n  }\n});\naxiosInstance.interceptors.response.use(response => response, error => {\n  const originalRequest = error.config; // Prevent infinite loops\n\n  if (error.response.status === 401 && originalRequest.url === baseURL + 'token/refresh/') {\n    window.location.href = '/login/';\n    return Promise.reject(error);\n  }\n\n  if (error.response.data.code === \"token_not_valid\" && error.response.status === 401 && error.response.statusText === \"Unauthorized\") {\n    const refreshToken = localStorage.getItem('refresh_token');\n\n    if (refreshToken) {\n      console.log(refreshToken);\n      const tokenParts = JSON.parse(atob(refreshToken.split('.')[1])); // exp date in token is expressed in seconds, while now() returns milliseconds:\n\n      const now = Math.ceil(Date.now() / 1000);\n      console.log(tokenParts.exp);\n\n      if (tokenParts.exp > now) {\n        return axiosInstance.post('api/auth/token/refresh/', {\n          refresh: refreshToken\n        }).then(response => {\n          localStorage.setItem('access_token', response.data.access);\n          localStorage.setItem('refresh_token', response.data.refresh);\n          axiosInstance.defaults.headers['Authorization'] = \"JWT \" + response.data.access;\n          originalRequest.headers['Authorization'] = \"JWT \" + response.data.access;\n          return axiosInstance(originalRequest);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log(\"Refresh token is expired\", tokenParts.exp, now);\n        window.location.href = '/login/';\n      }\n    } else {\n      console.log(\"Refresh token not available.\");\n      window.location.href = '/login/';\n    }\n  } // specific error handling done elsewhere\n\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["/Users/joonyounglee/MITHACK/MITHack2020/client/src/User/axiosApi.js"],"names":["axios","baseURL","axiosInstance","create","timeout","headers","localStorage","getItem","interceptors","response","use","error","originalRequest","config","status","url","window","location","href","Promise","reject","data","code","statusText","refreshToken","console","log","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","exp","post","refresh","then","setItem","access","defaults","catch","err"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nconst baseURL = 'http://localhost:8000/'\n\nconst axiosInstance = axios.create({\n    baseURL: baseURL,\n    timeout: 5000,\n    headers: {\n        'Authorization': localStorage.getItem('access_token') ? \"JWT \" + localStorage.getItem('access_token') : null,\n        'Content-Type': 'application/json',\n        'accept': 'application/json'\n    }\n});\n\n\naxiosInstance.interceptors.response.use(\n    response => response,\n    error => {\n        const originalRequest = error.config;\n\n        // Prevent infinite loops\n        if (error.response.status === 401 && originalRequest.url === baseURL+'token/refresh/') {\n            window.location.href = '/login/';\n            return Promise.reject(error);\n        }\n\n        if (error.response.data.code === \"token_not_valid\" &&\n            error.response.status === 401 && \n            error.response.statusText === \"Unauthorized\") \n            {\n                const refreshToken = localStorage.getItem('refresh_token');\n\n                if (refreshToken){\n                    console.log(refreshToken);\n                    const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\n\n                    // exp date in token is expressed in seconds, while now() returns milliseconds:\n                    const now = Math.ceil(Date.now() / 1000);\n                    console.log(tokenParts.exp);\n\n                    if (tokenParts.exp > now) {\n                        return axiosInstance\n                        .post('api/auth/token/refresh/', {refresh: refreshToken})\n                        .then((response) => {\n            \n                            localStorage.setItem('access_token', response.data.access);\n                            localStorage.setItem('refresh_token', response.data.refresh);\n            \n                            axiosInstance.defaults.headers['Authorization'] = \"JWT \" + response.data.access;\n                            originalRequest.headers['Authorization'] = \"JWT \" + response.data.access;\n            \n                            return axiosInstance(originalRequest);\n                        })\n                        .catch(err => {\n                            console.log(err)\n                        });\n                    }else{\n                        console.log(\"Refresh token is expired\", tokenParts.exp, now);\n                        window.location.href = '/login/';\n                    }\n                }else{\n                    console.log(\"Refresh token not available.\")\n                    window.location.href = '/login/';\n                }\n        }\n      \n     \n      // specific error handling done elsewhere\n      return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance"]},"metadata":{},"sourceType":"module"}